{"ast":null,"code":"import _regeneratorRuntime from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/celinaperalta/Documents/SideProjects/calify/src/components/Scheduler.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport '../App.css';\nimport PlaylistRow from './PlaylistRow';\nimport UniqueId from 'react-html-id';\nimport spfetch from './../spfetch';\nimport fetchPlayer from './../fetchPlayer';\n\nfunction ListItemLink(props) {\n  return /*#__PURE__*/React.createElement(ListItem, Object.assign({\n    button: true,\n    component: \"a\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }\n  }));\n}\n\nvar Scheduler = /*#__PURE__*/function (_React$Component) {\n  _inherits(Scheduler, _React$Component);\n\n  function Scheduler() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Scheduler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Scheduler)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      time: new Date(),\n      rows: [],\n      playlists: _this.props.data,\n      curr: null,\n      count: 0,\n      playing: false,\n      player: null,\n      playerState: {}\n    };\n\n    _this.handleGetPlaying = function () {\n      var t = new Date().toTimeString().split(' ')[0].substr(0, 8);\n\n      if (_this.state.curr !== null && t < _this.state.curr.end_time) {\n        return;\n      }\n\n      var curr = _this.state.rows.findIndex(function (row) {\n        return t >= row.start_time && t <= row.end_time;\n      });\n\n      if (curr < 0) {\n        _this.setState({\n          curr: null\n        });\n      } else {\n        _this.setState({\n          curr: _this.state.rows[curr]\n        });\n      }\n    };\n\n    _this.setSortedRows = function () {\n      var rows = _this.sortRowsByTime();\n\n      _this.setState({\n        rows: rows\n      });\n    };\n\n    _this.sortRowsByTime = function () {\n      var rows = _this.state.rows.sort(function (a, b) {\n        var s = a.start_time.localeCompare(b.start_time);\n        var e = a.start_time.localeCompare(b.start_time);\n        return s || e;\n      });\n\n      return rows;\n    };\n\n    _this.checkTimeOverlap = function () {\n      var rows = _this.sortRowsByTime();\n\n      var overlap = false;\n\n      for (var i = 0; i !== rows.length - 1; ++i) {\n        if (rows[i].start_time <= rows[i + 1].end_time && rows[i + 1].start_time <= rows[i].end_time) {\n          overlap = true;\n          console.log(\"Time conflict for: \" + rows[i].start_time + \" and \" + rows[i + 1].start_time);\n        }\n      }\n\n      if (!overlap) console.log(\"No conflicts\");\n    };\n\n    _this.handleAddRow = function () {\n      _this.setState(function (prevState, props) {\n        var row = {\n          id: _this.state.count,\n          name: \"\",\n          uri: \"\",\n          start_time: \"12:00\",\n          end_time: \"12:30\"\n        };\n        return {\n          rows: [].concat(_toConsumableArray(prevState.rows), [row])\n        };\n      });\n\n      _this.setState({\n        count: _this.state.count + 1\n      });\n    };\n\n    _this.handleDelete = function (id, e) {\n      var copyRows = Object.assign([], _this.state.rows);\n\n      var index = _this.state.rows.findIndex(function (row) {\n        return row.id === id;\n      });\n\n      copyRows.splice(index, 1);\n\n      _this.setState({\n        rows: copyRows\n      });\n    };\n\n    _this.handleChange = function (id, e) {\n      var index = _this.state.rows.findIndex(function (row) {\n        return row.id === id;\n      });\n\n      var row = Object.assign({}, _this.state.rows[index]);\n      var key = e.target.name;\n      row[key] = e.target.value;\n\n      if (e.target.name === \"name\") {\n        var playlist = _this.state.playlists.findIndex(function (row) {\n          return row.name === e.target.value;\n        });\n\n        console.log(_this.state.playlists);\n        row[\"uri\"] = _this.state.playlists[playlist].uri;\n      }\n\n      if (e.target.type === \"time\") {\n        var start = row.start_time;\n        var end = row.end_time;\n\n        if (end < start) {\n          row.end_time = row.start_time;\n        }\n      }\n\n      var rows = Object.assign([], _this.state.rows);\n      rows[index] = row;\n\n      _this.setState({\n        rows: rows\n      });\n    };\n\n    _this.handlePlayPlaylist = function (uri) {\n      _this.state.player.play(uri);\n    };\n\n    _this.handlePlayPreviousTrack = function () {\n      return _this.state.player.previousTrack();\n    };\n\n    _this.handlePlayNextTrack = function () {\n      return _this.state.player.nextTrack();\n    };\n\n    _this.handleResume = function () {\n      return _this.state.player.resume();\n    };\n\n    _this.handlePause = function () {\n      return _this.state.player.pause();\n    };\n\n    return _this;\n  }\n\n  _createClass(Scheduler, [{\n    key: \"initPlayer\",\n    // }\n    value: function () {\n      var _initPlayer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var player;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"INITIALIZING PLAYER\"); // Let's fetch a connected player instance and also add it to `window` for debugging purposes\n\n                _context.next = 3;\n                return fetchPlayer();\n\n              case 3:\n                player = global.player = _context.sent;\n                this.setState({\n                  player: player\n                });\n                player.addListener('player_state_changed', function (playerState) {\n                  return _this2.setState({\n                    playerState: playerState\n                  });\n                });\n                console.log(player);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initPlayer() {\n        return _initPlayer.apply(this, arguments);\n      }\n\n      return initPlayer;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.intervalID = setInterval(function () {\n                  return _this3.tick();\n                }, 1000);\n                _context2.next = 3;\n                return this.initPlayer();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalID);\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.setState({\n        time: new Date()\n      });\n\n      if (this.state.curr === null) {\n        this.handleGetPlaying();\n      } else {\n        var start = this.state.curr.start_time;\n        var end = this.state.curr.end_time;\n        var curr_time = this.state.time.toTimeString().split(' ')[0].substr(0, 8);\n\n        if (this.state.playing) {\n          if (curr_time > end) {\n            //update curr\n            this.handleGetPlaying();\n\n            if (this.state.curr !== null) {\n              //trigger play event\n              // this.handlePlayPlaylist(this.state.curr.uri)\n              console.log(\"Current: \" + this.state.curr.name);\n              console.log(\"uri: \" + this.state.curr.uri);\n            } else {\n              this.setState({\n                playing: false\n              });\n              this.state.player.pause();\n            }\n          }\n        } else {\n          if (curr_time > start) {\n            this.setState({\n              playing: true\n            });\n            this.handlePlayPlaylist(this.state.curr.uri);\n            console.log(\"Current: \" + this.state.curr.name);\n            console.log(\"uri: \" + this.state.curr.uri);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return /*#__PURE__*/React.createElement(Card, {\n        className: \"Scheduler\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(CardContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        gutterTop: true,\n        centered: true,\n        variant: \"h5\",\n        component: \"h2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 17\n        }\n      }, \" \", this.state.time.toTimeString(), \" \"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        centered: true,\n        variant: \"contained\",\n        color: \"primary\",\n        className: '',\n        onClick: this.handleAddRow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }\n      }, \"New Row\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        centered: true,\n        variant: \"contained\",\n        color: \"primary\",\n        className: '',\n        onClick: this.setSortedRows,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }\n      }, \"Sort\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        centered: true,\n        variant: \"contained\",\n        color: \"primary\",\n        className: '',\n        onClick: this.handleGetPlaying,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }\n      }, \"Get Next\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        centered: true,\n        variant: \"contained\",\n        color: \"primary\",\n        className: '',\n        onClick: this.checkTimeOverlap,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }\n      }, \"Check Overlap\")))), /*#__PURE__*/React.createElement(Paper, {\n        className: \"ScrollList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(List, {\n        component: \"nav\",\n        \"aria-label\": \"main\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }\n      }, this.state.rows && this.state.rows.map(function (d) {\n        return /*#__PURE__*/React.createElement(PlaylistRow, {\n          id: d.id,\n          name: d.name,\n          start_time: d.start_time,\n          end_time: d.end_time,\n          playlists: _this4.state.playlists,\n          onChange: _this4.handleChange.bind(_this4, d.id),\n          onDelete: _this4.handleDelete.bind(_this4, d.id),\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 37\n          }\n        });\n      }))));\n    }\n  }]);\n\n  return Scheduler;\n}(React.Component);\n\nexport default Scheduler;","map":{"version":3,"sources":["/Users/celinaperalta/Documents/SideProjects/calify/src/components/Scheduler.js"],"names":["React","makeStyles","List","ListItem","ListItemText","Card","CardContent","Typography","Paper","Button","Grid","PlaylistRow","UniqueId","spfetch","fetchPlayer","ListItemLink","props","Scheduler","state","time","Date","rows","playlists","data","curr","count","playing","player","playerState","handleGetPlaying","t","toTimeString","split","substr","end_time","findIndex","row","start_time","setState","setSortedRows","sortRowsByTime","sort","a","b","s","localeCompare","e","checkTimeOverlap","overlap","i","length","console","log","handleAddRow","prevState","id","name","uri","handleDelete","copyRows","Object","assign","index","splice","handleChange","key","target","value","playlist","type","start","end","handlePlayPlaylist","play","handlePlayPreviousTrack","previousTrack","handlePlayNextTrack","nextTrack","handleResume","resume","handlePause","pause","global","addListener","intervalID","setInterval","tick","initPlayer","clearInterval","curr_time","map","d","bind","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport '../App.css';\nimport PlaylistRow from './PlaylistRow';\nimport UniqueId from 'react-html-id';\nimport spfetch from './../spfetch';\nimport fetchPlayer from './../fetchPlayer';\n\nfunction ListItemLink(props) {\n  return <ListItem button component = \"a\" {...props}/>;\n}\n\nclass Scheduler extends React.Component {\n\n    // constructor(props) {\n    //     super(props);\n    state = {\n        time: new Date(),\n        rows: [],\n        playlists: this.props.data,\n        curr: null,\n        count: 0,\n        playing: false,\n        player: null,\n        playerState: {}\n    };\n    // }\n\n    async initPlayer() {\n        console.log(\"INITIALIZING PLAYER\");\n          // Let's fetch a connected player instance and also add it to `window` for debugging purposes\n          const player = (global.player = await fetchPlayer());\n          this.setState({\n              player\n          });\n          player.addListener('player_state_changed', playerState =>\n              this.setState({\n                  playerState\n              })\n          );\n        console.log(player);\n    }\n\n    async componentDidMount() {\n        this.intervalID = setInterval(\n            () => this.tick(),\n            1000\n        );\n        await this.initPlayer();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n    handleGetPlaying = () => {\n        const t = new Date().toTimeString().split(' ')[0].substr(0, 8);\n        if (this.state.curr !== null && t < this.state.curr.end_time) {\n            return;\n        }\n\n        const curr = this.state.rows.findIndex((row) => {\n            return t >= row.start_time && t <= row.end_time;\n        });\n\n        if (curr < 0) {\n            this.setState({\n                curr: null\n            });\n        } else {\n            this.setState({\n                curr: this.state.rows[curr]\n            });\n        }\n    }\n\n\n    tick() {\n        this.setState({\n            time: new Date()\n        });\n\n\n        if (this.state.curr === null) {\n            this.handleGetPlaying();\n        } else {\n            const start = this.state.curr.start_time;\n            const end = this.state.curr.end_time;\n            const curr_time = this.state.time.toTimeString().split(' ')[0].substr(0, 8);\n\n            if (this.state.playing) {\n                if (curr_time > end) {\n                    //update curr\n                    this.handleGetPlaying();\n                    if (this.state.curr !== null) {\n                        //trigger play event\n                        // this.handlePlayPlaylist(this.state.curr.uri)\n                        console.log(\"Current: \" + this.state.curr.name);\n                        console.log(\"uri: \" + this.state.curr.uri);\n                    } else {\n                        this.setState({\n                            playing: false\n                        });\n                        this.state.player.pause();\n                    }\n                }\n            } else {\n                if (curr_time > start) {\n                    this.setState({\n                        playing: true\n                    });\n                    this.handlePlayPlaylist(this.state.curr.uri)\n                    console.log(\"Current: \" + this.state.curr.name);\n                    console.log(\"uri: \" + this.state.curr.uri);\n                }\n            }\n        } \n    }\n\n    setSortedRows = () => {\n        const rows = this.sortRowsByTime();\n        this.setState({rows : rows})\n    }\n\n    sortRowsByTime = () => {\n        const rows = this.state.rows.sort((a, b) => {\n            const s = a.start_time.localeCompare(b.start_time);\n            const e = a.start_time.localeCompare(b.start_time);\n\n            return s || e;\n        });\n\n        return rows;\n    }\n\n    checkTimeOverlap = () => {\n        const rows = this.sortRowsByTime();\n        var overlap = false;\n        for (var i = 0; i !== rows.length - 1; ++i) {\n            if (rows[i].start_time <= rows[i + 1].end_time && rows[i + 1].start_time <= rows[i].end_time) {\n                overlap = true;\n                console.log(\"Time conflict for: \" + rows[i].start_time + \" and \" + rows[i + 1].start_time);\n            }\n        }\n        if (!overlap)\n            console.log(\"No conflicts\");\n    }\n\n\n    handleAddRow = () => {\n        this.setState((prevState, props) => {\n            const row = {\n                id: this.state.count,\n                name: \"\",\n                uri: \"\",\n                start_time: \"12:00\",\n                end_time: \"12:30\"\n            };\n            return {\n                rows: [...prevState.rows, row]\n            };\n        });\n        this.setState({count: (this.state.count + 1)})\n    };\n\n    handleDelete = (id, e) => {\n        const copyRows = Object.assign([], this.state.rows);\n        const index = this.state.rows.findIndex((row) => {\n            return row.id === id\n        });\n        copyRows.splice(index, 1);\n        this.setState({\n            rows: copyRows\n        });\n    }\n\n    handleChange = (id, e) => {\n        const index = this.state.rows.findIndex((row) => {\n            return row.id === id\n        });\n\n        const row = Object.assign({}, this.state.rows[index]);\n\n        const key = e.target.name;\n        row[key] = e.target.value;\n\n        if (e.target.name === \"name\") {\n            const playlist = this.state.playlists.findIndex((row) => {\n                return row.name === e.target.value\n            });\n            console.log(this.state.playlists);\n            row[\"uri\"] = this.state.playlists[playlist].uri;\n        }\n\n        if (e.target.type === \"time\") {\n            const start = row.start_time;\n            const end = row.end_time;\n            if (end < start) {\n                row.end_time = row.start_time;\n            }\n        }\n\n        const rows = Object.assign([], this.state.rows);\n        rows[index] = row;\n\n        this.setState({\n            rows: rows\n        });\n\n       \n    }\n\n    handlePlayPlaylist = (uri) => {\n        this.state.player.play(uri);\n    };\n\n    handlePlayPreviousTrack = () => this.state.player.previousTrack();\n    handlePlayNextTrack = () => this.state.player.nextTrack();\n    handleResume = () => this.state.player.resume();\n    handlePause = () => this.state.player.pause();\n    \n    render() {\n\n    return (\n      <Card className=\"Scheduler\">\n            <CardContent>\n                <Typography gutterTop centered variant=\"h5\" component=\"h2\"> {this.state.time.toTimeString()} </Typography>\n                <br></br>\n                <Grid container spacing={3}> \n                    <Grid item xs={3}>\n                        <Button\n                            centered\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={''}\n                            onClick={this.handleAddRow}>\n                            New Row\n                        </Button>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Button\n                            centered\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={''}\n                            onClick={this.setSortedRows}>\n                            Sort\n                        </Button>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Button\n                            centered\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={''}\n                            onClick={this.handleGetPlaying}>\n                            Get Next\n                        </Button>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Button\n                            centered\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={''}\n                            onClick={this.checkTimeOverlap}>\n                            Check Overlap\n                        </Button>\n                    </Grid>\n                </Grid>\n        </CardContent> \n        < Paper className = \"ScrollList\" >\n            <List component=\"nav\" aria-label=\"main\">\n                    {this.state.rows && (\n                        this.state.rows.map((d) => {\n                            return (<PlaylistRow\n                                id={d.id}\n                                name={d.name}\n                                start_time={d.start_time}\n                                end_time={d.end_time}\n                                playlists={this.state.playlists}\n                                onChange={this.handleChange.bind(this, d.id)}\n                                onDelete={this.handleDelete.bind(this, d.id)} />)\n                        }))}\n            </List>\n            </Paper>\n       </Card>\n   )};\n}\n\nexport default Scheduler;"]},"metadata":{},"sourceType":"module"}