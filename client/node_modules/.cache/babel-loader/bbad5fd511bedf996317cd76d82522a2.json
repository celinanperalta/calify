{"ast":null,"code":"import _toConsumableArray from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/celinaperalta/Documents/SideProjects/calify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/celinaperalta/Documents/SideProjects/calify/src/components/Scheduler.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport '../App.css';\nimport PlaylistRow from './PlaylistRow';\nimport UniqueId from 'react-html-id';\n\nfunction ListItemLink(props) {\n  return /*#__PURE__*/React.createElement(ListItem, Object.assign({\n    button: true,\n    component: \"a\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }\n  }));\n}\n\nvar Scheduler = /*#__PURE__*/function (_React$Component) {\n  _inherits(Scheduler, _React$Component);\n\n  function Scheduler(props) {\n    var _this;\n\n    _classCallCheck(this, Scheduler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scheduler).call(this, props));\n\n    _this.setSortedRows = function () {\n      var rows = _this.sortRowsByTime();\n\n      _this.setState({\n        rows: rows\n      });\n    };\n\n    _this.sortRowsByTime = function () {\n      var rows = _this.state.rows.sort(function (a, b) {\n        var s = a.start_time.localeCompare(b.start_time);\n        var e = a.start_time.localeCompare(b.start_time);\n        return s || e;\n      });\n\n      return rows;\n    };\n\n    _this.checkTimeOverlap = function () {\n      var rows = _this.sortRowsByTime();\n\n      var overlap = false;\n\n      for (var i = 0; i !== rows.length - 1; ++i) {\n        if (rows[i].start_time <= rows[i + 1].end_time && rows[i + 1].start_time <= rows[i].end_time) {\n          overlap = true;\n          console.log(\"Time conflict for: \" + rows[i].start_time + \" and \" + rows[i + 1].start_time);\n        }\n      }\n\n      if (!overlap) console.log(\"No conflicts\");\n    };\n\n    _this.handleAddRow = function () {\n      _this.setState(function (prevState, props) {\n        var row = {\n          id: _this.state.count,\n          name: \"\",\n          uri: \"\",\n          start_time: \"12:00\",\n          end_time: \"12:30\"\n        };\n        return {\n          rows: [].concat(_toConsumableArray(prevState.rows), [row])\n        };\n      });\n\n      _this.setState({\n        count: _this.state.count + 1\n      });\n    };\n\n    _this.handleDelete = function (id, e) {\n      var copyRows = Object.assign([], _this.state.rows);\n\n      var index = _this.state.rows.findIndex(function (row) {\n        return row.id === id;\n      });\n\n      copyRows.splice(index, 1);\n\n      _this.setState({\n        rows: copyRows\n      });\n    };\n\n    _this.handleChange = function (id, e) {\n      var index = _this.state.rows.findIndex(function (row) {\n        return row.id === id;\n      });\n\n      var row = Object.assign({}, _this.state.rows[index]);\n      var key = e.target.name;\n      row[key] = e.target.value;\n      console.log(e.target.type);\n\n      if (e.target.name === \"name\") {\n        var playlist = _this.state.playlists.findIndex(function (row) {\n          return row.name === e.target.value;\n        });\n\n        console.log(_this.state.playlists);\n        row[\"uri\"] = _this.state.playlists[playlist].uri;\n      }\n\n      if (e.target.type === \"time\") {\n        var start = row.start_time;\n        var end = row.end_time;\n\n        if (end < start) {\n          row.end_time = row.start_time;\n        }\n      }\n\n      var rows = Object.assign([], _this.state.rows);\n      rows[index] = row;\n\n      _this.setState({\n        rows: rows\n      });\n    };\n\n    _this.state = {\n      time: new Date(),\n      rows: [],\n      playlists: props.data,\n      curr: null,\n      count: 0\n    };\n    return _this;\n  }\n\n  _createClass(Scheduler, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.intervalID = setInterval(function () {\n        return _this2.tick();\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalID);\n    }\n  }, {\n    key: \"handleGetPlaying\",\n    value: function handleGetPlaying() {\n      console.log(\"Index: \" + curr);\n      var t = new Date().toTimeString().split(' ')[0].substr(0, 5);\n      var curr = this.state.rows.findIndex(function (row) {\n        return t >= row.start_time && t <= row.end_time;\n      });\n\n      if (curr === -1) {\n        this.setState({\n          curr: null\n        });\n      } else {\n        this.setState({\n          curr: this.state.rows[curr]\n        });\n      }\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.setState({\n        time: new Date()\n      });\n\n      if (this.state.curr === null) {\n        this.handleGetPlaying();\n        console.log(\"Curr: \" + this.state.curr);\n      } else {\n        var end = this.state.curr.end_time;\n        console.log(end);\n        var curr_time = this.state.time.toTimeString().split(' ')[0].substr(0, 5);\n\n        if (curr_time > end) {\n          this.handleGetPlaying();\n          console.log(\"Updated curr: \" + this.state.curr);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(Card, {\n        className: \"Scheduler\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(CardContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        gutterTop: true,\n        centered: true,\n        variant: \"h5\",\n        component: \"h2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }\n      }, \" \", this.state.time.toLocaleTimeString(), \" \"), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        centered: true,\n        variant: \"contained\",\n        color: \"primary\",\n        className: '',\n        onClick: this.handleAddRow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }\n      }, \"New Row\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        centered: true,\n        variant: \"contained\",\n        color: \"primary\",\n        className: '',\n        onClick: this.setSortedRows,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }\n      }, \"Sort\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        centered: true,\n        variant: \"contained\",\n        color: \"primary\",\n        className: '',\n        onClick: this.handleGetPlaying,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }\n      }, \"Get Next\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        centered: true,\n        variant: \"contained\",\n        color: \"primary\",\n        className: '',\n        onClick: this.checkTimeOverlap,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }\n      }, \"Check Overlap\")))), /*#__PURE__*/React.createElement(Paper, {\n        className: \"ScrollList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(List, {\n        component: \"nav\",\n        \"aria-label\": \"main\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }\n      }, this.state.rows && this.state.rows.map(function (d) {\n        return /*#__PURE__*/React.createElement(PlaylistRow, {\n          id: d.id,\n          name: d.name,\n          start_time: d.start_time,\n          end_time: d.end_time,\n          playlists: _this3.state.playlists,\n          onChange: _this3.handleChange.bind(_this3, d.id),\n          onDelete: _this3.handleDelete.bind(_this3, d.id),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 37\n          }\n        });\n      }))));\n    }\n  }]);\n\n  return Scheduler;\n}(React.Component);\n\nexport default Scheduler;","map":{"version":3,"sources":["/Users/celinaperalta/Documents/SideProjects/calify/src/components/Scheduler.js"],"names":["React","makeStyles","List","ListItem","ListItemText","Card","CardContent","Typography","Paper","Button","Grid","PlaylistRow","UniqueId","ListItemLink","props","Scheduler","setSortedRows","rows","sortRowsByTime","setState","state","sort","a","b","s","start_time","localeCompare","e","checkTimeOverlap","overlap","i","length","end_time","console","log","handleAddRow","prevState","row","id","count","name","uri","handleDelete","copyRows","Object","assign","index","findIndex","splice","handleChange","key","target","value","type","playlist","playlists","start","end","time","Date","data","curr","intervalID","setInterval","tick","clearInterval","t","toTimeString","split","substr","handleGetPlaying","curr_time","toLocaleTimeString","map","d","bind","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport '../App.css';\nimport PlaylistRow from './PlaylistRow';\nimport UniqueId from 'react-html-id';\n\nfunction ListItemLink(props) {\n  return <ListItem button component = \"a\" {...props}/>;\n}\n\nclass Scheduler extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            time: new Date(),\n            rows: [],\n            playlists: props.data,\n            curr: null,\n            count: 0\n        };\n    }\n\n    componentDidMount() {\n        this.intervalID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n    handleGetPlaying() {\n\n        console.log(\"Index: \" + curr);\n\n        const t = new Date().toTimeString().split(' ')[0].substr(0, 5);\n\n        const curr = this.state.rows.findIndex((row) => {\n            return t >= row.start_time && t <= row.end_time;\n        });\n\n        \n\n        if (curr === -1) {\n            this.setState({\n                curr: null\n            });\n        } else {\n            this.setState({\n                curr: this.state.rows[curr]\n            });\n        }\n    }\n\n\n    tick() {\n        this.setState({\n            time: new Date()\n        });\n\n        if (this.state.curr === null) {\n            this.handleGetPlaying();\n            console.log(\"Curr: \" + this.state.curr);\n        } else {\n            const end = this.state.curr.end_time;\n            console.log(end);\n            const curr_time = this.state.time.toTimeString().split(' ')[0].substr(0, 5);\n\n            if (curr_time > end) {\n                this.handleGetPlaying();\n                console.log(\"Updated curr: \" + this.state.curr);\n            }\n        }\n\n    }\n\n    setSortedRows = () => {\n        const rows = this.sortRowsByTime();\n        this.setState({rows : rows})\n    }\n\n    sortRowsByTime = () => {\n        const rows = this.state.rows.sort((a, b) => {\n            const s = a.start_time.localeCompare(b.start_time);\n            const e = a.start_time.localeCompare(b.start_time);\n\n            return s || e;\n        });\n\n        return rows;\n    }\n\n    checkTimeOverlap = () => {\n        const rows = this.sortRowsByTime();\n        var overlap = false;\n        for (var i = 0; i !== rows.length - 1; ++i) {\n            if (rows[i].start_time <= rows[i + 1].end_time && rows[i + 1].start_time <= rows[i].end_time) {\n                overlap = true;\n                console.log(\"Time conflict for: \" + rows[i].start_time + \" and \" + rows[i + 1].start_time);\n            }\n        }\n        if (!overlap)\n            console.log(\"No conflicts\");\n    }\n\n\n    handleAddRow = () => {\n        this.setState((prevState, props) => {\n            const row = {\n                id: this.state.count,\n                name: \"\",\n                uri: \"\",\n                start_time: \"12:00\",\n                end_time: \"12:30\"\n            };\n            return {\n                rows: [...prevState.rows, row]\n            };\n        });\n        this.setState({count: (this.state.count + 1)})\n    };\n\n    handleDelete = (id, e) => {\n        const copyRows = Object.assign([], this.state.rows);\n        const index = this.state.rows.findIndex((row) => {\n            return row.id === id\n        });\n        copyRows.splice(index, 1);\n        this.setState({\n            rows: copyRows\n        });\n    }\n\n    handleChange = (id, e) => {\n        const index = this.state.rows.findIndex((row) => {\n            return row.id === id\n        });\n\n        const row = Object.assign({}, this.state.rows[index]);\n\n        const key = e.target.name;\n        row[key] = e.target.value;\n\n        console.log(e.target.type);\n\n        if (e.target.name === \"name\") {\n            const playlist = this.state.playlists.findIndex((row) => {\n                return row.name === e.target.value\n            });\n            console.log(this.state.playlists);\n            row[\"uri\"] = this.state.playlists[playlist].uri;\n        }\n\n        if (e.target.type === \"time\") {\n            const start = row.start_time;\n            const end = row.end_time;\n            if (end < start) {\n                row.end_time = row.start_time;\n            }\n        }\n\n        const rows = Object.assign([], this.state.rows);\n        rows[index] = row;\n\n        this.setState({\n            rows: rows\n        });\n\n       \n    }\n    \n    render() {\n    return (\n      <Card className=\"Scheduler\">\n            <CardContent>\n                <Typography gutterTop centered variant=\"h5\" component=\"h2\"> {this.state.time.toLocaleTimeString()} </Typography>\n                <Grid container spacing={3}> \n                    <Grid item xs={3}>\n                        <Button\n                            centered\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={''}\n                            onClick={this.handleAddRow}>\n                            New Row\n                        </Button>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Button\n                            centered\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={''}\n                            onClick={this.setSortedRows}>\n                            Sort\n                        </Button>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Button\n                            centered\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={''}\n                            onClick={this.handleGetPlaying}>\n                            Get Next\n                        </Button>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <Button\n                            centered\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={''}\n                            onClick={this.checkTimeOverlap}>\n                            Check Overlap\n                        </Button>\n                    </Grid>\n                </Grid>\n        </CardContent> \n        < Paper className = \"ScrollList\" >\n            <List component=\"nav\" aria-label=\"main\">\n                    {this.state.rows && (\n                        this.state.rows.map((d) => {\n                            return (<PlaylistRow\n                                id={d.id}\n                                name={d.name}\n                                start_time={d.start_time}\n                                end_time={d.end_time}\n                                playlists={this.state.playlists}\n                                onChange={this.handleChange.bind(this, d.id)}\n                                onDelete={this.handleDelete.bind(this, d.id)} />)\n                        }))}\n            </List>\n            </Paper>\n       </Card>\n   )};\n}\n\nexport default Scheduler;"]},"metadata":{},"sourceType":"module"}