{"ast":null,"code":"import _regeneratorRuntime from \"/Users/celinaperalta/Documents/SideProjects/calify-RE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/celinaperalta/Documents/SideProjects/calify-RE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport spfetch from './spfetch';\nexport default function () {\n  return _ref.apply(this, arguments);\n}\n\nfunction _ref() {\n  _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              if (global.Spotify) onSpotifyWebPlaybackSDKReady();\n              global.onSpotifyWebPlaybackSDKReady = onSpotifyWebPlaybackSDKReady;\n\n              function onSpotifyWebPlaybackSDKReady() {\n                return _onSpotifyWebPlaybackSDKReady.apply(this, arguments);\n              }\n\n              function _onSpotifyWebPlaybackSDKReady() {\n                _onSpotifyWebPlaybackSDKReady = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var token, player;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          token = spfetch.getToken();\n                          player = new global.Spotify.Player({\n                            name: 'Calify',\n                            getOAuthToken: function getOAuthToken(cb) {\n                              return cb(token);\n                            }\n                          });\n                          player.addListener('initialization_error', reject);\n                          player.addListener('authentication_error', reject);\n                          player.addListener('account_error', reject);\n                          player.addListener('playback_error', console.error);\n                          _context.next = 8;\n                          return player.connect();\n\n                        case 8:\n                          player.id = player._options.id; // Add missing play functionality\n\n                          player.play = player.playTracks = player.playURI = function (playable) {\n                            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                                offset = _ref2.offset,\n                                position_ms = _ref2.position_ms;\n\n                            var uris;\n                            var context_uri;\n\n                            if (Array.isArray(playable) && playable.every(function (track) {\n                              return /^spotify:track:[^:]{22}$/.test(track);\n                            })) {\n                              uris = playable;\n                            } else if (/^spotify:(album|artist|playlist|(?:user:[^:]+:playlist)):[^:]+$/.test(playable)) {\n                              context_uri = playable;\n                            } else {\n                              throw new Error('Unsupported playable');\n                            }\n\n                            return spfetch(\"/v1/me/player/play?device_id=\".concat(player.id), {\n                              method: 'PUT',\n                              body: {\n                                uris: uris,\n                                context_uri: context_uri,\n                                position_ms: position_ms,\n                                offset: offset\n                              }\n                            });\n                          };\n\n                          resolve(player);\n\n                        case 11:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n                return _onSpotifyWebPlaybackSDKReady.apply(this, arguments);\n              }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _ref.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/celinaperalta/Documents/SideProjects/calify-RE/client/src/fetchPlayer.js"],"names":["spfetch","Promise","resolve","reject","global","Spotify","onSpotifyWebPlaybackSDKReady","token","getToken","player","Player","name","getOAuthToken","cb","addListener","console","error","connect","id","_options","play","playTracks","playURI","playable","offset","position_ms","uris","context_uri","Array","isArray","every","track","test","Error","method","body"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA;AAAA;AAAA;;;kEAAe;AAAA;AAAA;AAAA;AAAA;AAAA,8CACN,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,MAAM,CAACC,OAAX,EAAoBC,4BAA4B;AAChDF,cAAAA,MAAM,CAACE,4BAAP,GAAsCA,4BAAtC;;AAFsC,uBAIvBA,4BAJuB;AAAA;AAAA;;AAAA;AAAA,yGAItC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,0BAAAA,KADR,GACgBP,OAAO,CAACQ,QAAR,EADhB;AAEQC,0BAAAA,MAFR,GAEiB,IAAIL,MAAM,CAACC,OAAP,CAAeK,MAAnB,CAA0B;AACvCC,4BAAAA,IAAI,EAAE,QADiC;AAEvCC,4BAAAA,aAAa,EAAE,uBAAAC,EAAE;AAAA,qCAAIA,EAAE,CAACN,KAAD,CAAN;AAAA;AAFsB,2BAA1B,CAFjB;AAOEE,0BAAAA,MAAM,CAACK,WAAP,CAAmB,sBAAnB,EAA2CX,MAA3C;AACAM,0BAAAA,MAAM,CAACK,WAAP,CAAmB,sBAAnB,EAA2CX,MAA3C;AACAM,0BAAAA,MAAM,CAACK,WAAP,CAAmB,eAAnB,EAAoCX,MAApC;AACAM,0BAAAA,MAAM,CAACK,WAAP,CAAmB,gBAAnB,EAAqCC,OAAO,CAACC,KAA7C;AAVF;AAAA,iCAYQP,MAAM,CAACQ,OAAP,EAZR;;AAAA;AAaER,0BAAAA,MAAM,CAACS,EAAP,GAAYT,MAAM,CAACU,QAAP,CAAgBD,EAA5B,CAbF,CAeE;;AACAT,0BAAAA,MAAM,CAACW,IAAP,GAAcX,MAAM,CAACY,UAAP,GAAoBZ,MAAM,CAACa,OAAP,GAAiB,UACjDC,QADiD,EAG9C;AAAA,4GADuB,EACvB;AAAA,gCADDC,MACC,SADDA,MACC;AAAA,gCADOC,WACP,SADOA,WACP;;AACH,gCAAIC,IAAJ;AACA,gCAAIC,WAAJ;;AACA,gCACEC,KAAK,CAACC,OAAN,CAAcN,QAAd,KACAA,QAAQ,CAACO,KAAT,CAAe,UAAAC,KAAK;AAAA,qCAAI,2BAA2BC,IAA3B,CAAgCD,KAAhC,CAAJ;AAAA,6BAApB,CAFF,EAGE;AACAL,8BAAAA,IAAI,GAAGH,QAAP;AACD,6BALD,MAKO,IACL,kEAAkES,IAAlE,CACET,QADF,CADK,EAIL;AACAI,8BAAAA,WAAW,GAAGJ,QAAd;AACD,6BANM,MAMA;AACL,oCAAM,IAAIU,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,mCAAOjC,OAAO,wCAAiCS,MAAM,CAACS,EAAxC,GAA8C;AAC1DgB,8BAAAA,MAAM,EAAE,KADkD;AAE1DC,8BAAAA,IAAI,EAAE;AACJT,gCAAAA,IAAI,EAAJA,IADI;AAEJC,gCAAAA,WAAW,EAAXA,WAFI;AAGJF,gCAAAA,WAAW,EAAXA,WAHI;AAIJD,gCAAAA,MAAM,EAANA;AAJI;AAFoD,6BAA9C,CAAd;AASD,2BA9BD;;AAgCAtB,0BAAAA,OAAO,CAACO,MAAD,CAAP;;AAhDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJsC;AAAA;AAAA;AAsDvC,aAtDM,CADM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import spfetch from './spfetch';\n\nexport default async function() {\n  return new Promise((resolve, reject) => {\n    if (global.Spotify) onSpotifyWebPlaybackSDKReady();\n    global.onSpotifyWebPlaybackSDKReady = onSpotifyWebPlaybackSDKReady;\n\n    async function onSpotifyWebPlaybackSDKReady() {\n      const token = spfetch.getToken();\n      const player = new global.Spotify.Player({\n        name: 'Calify',\n        getOAuthToken: cb => cb(token)\n      });\n\n      player.addListener('initialization_error', reject);\n      player.addListener('authentication_error', reject);\n      player.addListener('account_error', reject);\n      player.addListener('playback_error', console.error);\n\n      await player.connect();\n      player.id = player._options.id;\n\n      // Add missing play functionality\n      player.play = player.playTracks = player.playURI = (\n        playable,\n        { offset, position_ms } = {}\n      ) => {\n        let uris;\n        let context_uri;\n        if (\n          Array.isArray(playable) &&\n          playable.every(track => /^spotify:track:[^:]{22}$/.test(track))\n        ) {\n          uris = playable;\n        } else if (\n          /^spotify:(album|artist|playlist|(?:user:[^:]+:playlist)):[^:]+$/.test(\n            playable\n          )\n        ) {\n          context_uri = playable;\n        } else {\n          throw new Error('Unsupported playable');\n        }\n\n        return spfetch(`/v1/me/player/play?device_id=${player.id}`, {\n          method: 'PUT',\n          body: {\n            uris,\n            context_uri,\n            position_ms,\n            offset\n          }\n        });\n      };\n\n      resolve(player);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}